import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { map, Observable } from 'rxjs';
import { IOffer } from '../../interfaces/Ioffer';
import { environment } from '../../../../../environments/environment.development';
import { AuthService } from '../../../../core/services/auth/auth.service';

@Injectable({
  providedIn: 'root'
})
export class OfferService {
  private apiUrl = environment.offerUrl;

  constructor(private http: HttpClient, private auth: AuthService) {}

  /** 
   * Create a new offer for a project 
   * @param offer an IOffer object (id can be omitted or generated by the server)
   */
  createOffer(offer: Partial<IOffer>): Observable<IOffer> {
    return this.http.post<IOffer>(`${this.apiUrl}/create-offer`, offer);
  }

  /** fetch all offers made by the logged-in user */
  // Updated OfferService
  getCurrentUserOffers(): Observable<IOffer[]> {
    const token = this.auth.getToken();
    return this.http.get<{ data: any[] }>(`${this.apiUrl}/offers/current-user`, {
      headers: { Authorization: `Bearer ${token}` }
    }).pipe(
      map(response => response.data.map(offer => ({
        // Map backend fields to frontend interface
        id: offer.offerId.toString(),
        offerAmount: offer.offerAmount,
        investmentType: offer.investmentType,
        equityPercentage: offer.equityPercentage || 0,
        profitShare: offer.profitShare || 0,
        offerTerms: offer.offerTerms,
        projectId: offer.projectId,
        investorId: offer.investorId
      })))
    );
  }

  /*getAllOffers(): Observable<IOffer[]> {
    return this.http.get<IOffer[]>(this.apiUrl);
  }

  getOfferById(id: number): Observable<IOffer> {
    return this.http.get<IOffer>(`${this.apiUrl}/${id}`);
  }

  updateOffer(id: number, offer: Partial<IOffer>): Observable<IOffer> {
    return this.http.patch<IOffer>(`${this.apiUrl}/${id}`, offer);
  }

  deleteOffer(id: number): Observable<any> {
    return this.http.delete(`${this.apiUrl}/${id}`);
  }*/
}
